{"ts":1354609094740,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Module dependencies.\n */\n\nvar mongo = require('mongoose'),\n    request = require(\"request\"),\n    sys = require('sys'),\n    cheerio   = require(\"cheerio\");\nvar db = mongo.connect('mongodb://localhost/moe');\n\nvar express = require('express')\n  , routes = require('./routes')\n  , http = require('http')\n  , path = require('path')\n  , keywords = require('./models/keyword_list')\n  , inquiry = require('./models/inquiry_list')\n  , status = require('./models/status_list');\n\nvar PassageID;\nvar app = express();\n\napp.configure(function(){\n  app.set('port', process.env.PORT || 8080);\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'jade');\n  app.use(express.favicon());\n  app.use(express.logger('dev'));\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(app.router);\n  app.use(express.static(path.join(__dirname, 'public')));\n});\n\napp.configure('development', function(){\n  app.use(express.errorHandler());\n});\n\n// ホーム\napp.get('/', function(req, res) {\n    status.findOne({}, function(err, status) {\n        if(err) throw err;\n        res.render('index', {pretty:true, glasses:status.glasses});\n    });\n   PassageID = setTimeout(function(){console.log('しりとりしますか？');},180000);\n\n});\n \n// メイン処理\napp.post('/talk', function(req, res) {\n       clearInterval(PassageID);\n      //inquiry\n      var input = req.body.input || '';\n      var ans = new Object();\n      keywords.find({},function(err,keywords){\n           if(err) throw err;\n\t\t   ans = matchMain(keywords, input);\n           if(ans.answer==null||ans.answer==undefined) {var ans = new Object; ans = unableAnswer(input);}\n           console.log(JSON.stringify(ans));\n           res.send(JSON.stringify(ans));\n      });\n});\n\nhttp.createServer(app).listen(app.get('port'), function(){\n  console.log(\"Express server listening on port \" + app.get('port'));\n});\n\n// マッチングメインフロー\nfunction matchMain(keywords, input){\n\tvar ans = new Object();\n\tfor(var i = 0; i < keywords.length; i++){\n\t    if(keywords[i].analys_type == 'K'){\n\t        if(keywords[i].reply_type == 'C'){\n\t            if(checkKeyWord(input,keywords[i].keyword1) \n\t            && checkKeyWord(input,keywords[i].keyword2)){\n\t                ans.answer = replaceTemplate(keywords[i]);\n                    ans.face=keywords[i].face;\n\t            } \n\t        } else {\n\t\t\t    if(checkKeyWord(input,keywords[i].keyword1) \n\t\t\t    && checkKeyWord(input,keywords[i].keyword2) \n\t\t\t    && checkKeyWord(input,keywords[i].keyword3) ){\n\t\t\t         ans.answer = keywords[i].answer;\n                     ans.face=keywords[i].face;\n\t\t\t    }\n\t    \t}\n\t\t}\n\t}\n\treturn ans;\n\n}\n\n\n// 質問文内キーワードサーチ\nfunction checkKeyWord(inquiry, keyword){\n\tvar res = false;\n\tvar re = new RegExp(keyword);\n\tif(inquiry.match(re)) {res = true;}\n\treturn res;\n};\n\n// 回答文テンプレートの置換処理\nfunction replaceTemplate(keywords){\n\tvar res = keywords.answer.replace(\"keyword1\",keywords.keyword1);\n    res = res.replace(\"keyword2\",keywords.keyword2);\n    res = res.replace(\"keyword3\",keywords.keyword3);\n\treturn res;\n};\n\n// 回答不可能時処理\nfunction unableAnswer(input){\n\tvar ans = new Object();\n    ans.face='2';\n\tswitch(Math.round(Math.random() * 4) + 1){\n\t    case 1:\n\t        ans.answer = '申し訳ありません、お答えすることが出来ません。。';\n\t        break;\n\t    case 2:\n\t        ans.answer = '私にはまだ回答ができません、ごめんなさい';\n\t        break;\n\t    case 3:\n\t        ans.answer = 'ごめんなさい！わからないので調べておきます';\n\t        break;\n\t    case 4:\n\t        ans.answer = '申し訳ありません、こちらで調べて頂けますでしょうか（リンク　https://www.valuecommerce.ne.jp/support/ptn/faq/?clm=right&ref=ptn_top）';\n\t        break;\n\t    case 5:\n\t        ans.answer = '私にはお答えできないので、こちらまでお問い合わせください　（リンク　https://www.valuecommerce.ne.jp/support/ptn/?clm=right&ref=ptn_top）';\n\t        break;\n\t}\n    stockInquiry(input);\n\treturn ans;  \n}\n// 回答不能時のロギング\nfunction stockInquiry(input){\n\tmorpAna(input);\n}\n\n\nfunction morpAna(input){\n\tvar url = \"http://jlp.yahooapis.jp/MAService/V1/parse?appid=BEJ8XTSxg67a4E4wkrh9Fk1MN5GwEm9d5DplSAeUZ6tepQjcAeTWDDRFW2GkF6qWdg--&results=ma,uniq&uniq_filter=9|10&sentence=\"+encodeURI(input);\n\tvar data=new Array();\n\n\t//  回答不能の質問文のみを形態素解析\n\trequest({uri:url}, function (error, response, body) {\n\t    if (!error && response.statusCode == 200) {\n\t\t\t\tvar $ = cheerio.load(body);\n\t            $('ma_result').find('word_list').find('word').each(function(){\n\t\t\t\t\t var dat= {};\n\t\t\t\t\t dat.surface = $(this).children('surface').text().toString();\n\t\t\t\t\t dat.reading = $(this).children('reading').text().toString();\n\t\t\t\t\t dat.pos = $(this).children('pos').text().toString();\n\t\t\t\t\t data.push(dat);\n\t\t\t\t });\n\t\t\t\tloggingInquiry(input, data);\n\t\t}\n\t});\n}\n\n\n\n\nfunction loggingInquiry(input, data){\n\tvar inq = new inquiry();\n\t// Mongoへの書き込みをする\n\tinq.timestamp = new Date();;\n\tinq.inquiry = input;\n\tinq.inquirydata = JSON.stringify(data);\n\tinq.save(function(err){\n\t\tif (err) { console.log(err); }\n\t});\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":4806}]],"length":4806}
